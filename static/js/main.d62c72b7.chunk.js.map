{"version":3,"sources":["Components/tictac/tictac.jsx","App.js","serviceWorker.js","index.js"],"names":["TicTac","useState","squares","setSquares","isNext","setIsNext","hasWinner","SetHasWinner","history","setHistory","HandleOnClick","index","calculateWinner","square","auxSquares","auxHistory","push","useEffect","winner","document","getElementById","className","moves","map","step","desc","key","onClick","moveHandle","class","role","Square","props","id","lines","i","length","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d62c72b7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./tictac.css\";\r\n\r\nexport default function TicTac() {\r\n  const [squares, setSquares] = useState([\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n  ]);\r\n  const [isNext, setIsNext] = useState(false);\r\n  const [hasWinner, SetHasWinner] = useState(null);\r\n  const [history, setHistory] = useState([squares]);\r\n\r\n  const HandleOnClick = (index) => {\r\n      \r\n    if (calculateWinner(squares) || squares[index] !== null) {\r\n      return;\r\n    }\r\n    let square = \"null\";\r\n    let auxSquares = [...squares];\r\n\r\n    if (squares[index] === null) {\r\n      if (isNext) {\r\n        square = \"O\";\r\n      } else {\r\n        square = \"X\";\r\n      }\r\n      setIsNext(!isNext);\r\n      auxSquares[index] = square;\r\n      setSquares(auxSquares);\r\n      let auxHistory=[...history];\r\n     \r\n       auxHistory.push(squares); \r\n    \r\n       setHistory(auxHistory);\r\n    \r\n    }\r\n\r\n      \r\n      \r\n  };\r\n\r\n  useEffect(() => {\r\n    const winner = calculateWinner(squares);\r\n    if (winner !== null) {\r\n      SetHasWinner(winner);\r\n      document.getElementById(winner[0]).className=\"btn btn-success\";\r\n      document.getElementById(winner[1]).className=\"btn btn-success\";\r\n      document.getElementById(winner[2]).className=\"btn btn-success\";\r\n    }\r\n   \r\n    \r\n  }, [squares]);\r\n\r\n  const moveHandle = (step,index) => {\r\n   \r\n    setSquares(step);\r\n  };\r\n\r\n  const moves = history.map((step, index) => {\r\n    \r\n    const desc = index ? \"Go to move #\" + index : \"Go to game start\";\r\n    return (\r\n      <li className=\"step-history\" key={index}>\r\n        <button className=\"btn btn-secondary\" onClick={() => moveHandle(step,index)}>\r\n          {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"game-info\">\r\n        <div class=\"alert alert-info\" role=\"alert\">\r\n          Next Player :{isNext ? \"O\" : \"X\"}\r\n        </div>\r\n        <div> {moves} </div>\r\n\r\n        {hasWinner ? (\r\n          <h1 className=\"badge badge-warning\">GAME FINISH, Player {hasWinner[3]}  Win</h1>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n      <div className=\"wraper\">\r\n        {squares.map((square, index) => (\r\n          <Square\r\n            key={index}\r\n            index={index}\r\n            square={square}\r\n            HandleOnClick={HandleOnClick}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Square(props) {\r\n  const { index, square } = props;\r\n\r\n  return (\r\n    <div className=\"btn btn-primary\" id={index} onClick={() => props.HandleOnClick(index)}>\r\n      {square}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    \r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        const result=[a,b,c,squares[a]];\r\n      return result;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport TicTac from \"./Components/tictac/tictac\";\n\nfunction App() {\n\n  return (\n    <TicTac/>)\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}